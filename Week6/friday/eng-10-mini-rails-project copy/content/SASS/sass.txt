Title: sass
Summary: Sass is an extension of css and makes styling through relationships much easier then conventional css.

Sass also known as 'Syntactically Awesome Style Sheets' is an preprocessor scripting language, that operates as an extension of css. 

name: "nesting"

When writing HTML you've probably noticed that it has a clear nested and visual hierarchy. CSS, on the other hand, doesn't.
Sass will let you nest your CSS selectors in a way that follows the same visual hierarchy of your HTML. Be aware that overly nested rules will result in over-qualified CSS that could prove hard to maintain and is generally considered bad practice. 

name: "variables"

Think of variables as a way to store information that you want to reuse throughout your stylesheet. You can store things like colours, font stacks, or any CSS value you think you'll want to reuse. Sass uses the $ symbol to make something a variable. When the Sass is processed, it takes the variables we define for the $font-stack and $primary-colour and outputs normal CSS with our variable values placed in the CSS. This can be extremely powerful when working with brand colours and keeping them consistent throughout the site.

name: "partials"

You can create partial Sass files that contain little snippets of CSS that you can include in other Sass files. This is a great way to modularise your CSS and help keep things easier to maintain. A partial is simply a Sass file named with a leading underscore. You might name it something like _partial.scss. The underscore lets Sass know that the file is only a partial file and that it should not be generated into a CSS file. Sass partials are used with the @import directive.


name: "mixins"

Some things in CSS are a bit tedious to write, especially with CSS3 and the many vendor prefixes that exist. A mixin lets you make groups of CSS declarations that you want to reuse throughout your site. You can even pass in values to make your mixin more flexible. A good use of a mixin is for vendor prefixes. Here's an example for transform. To create a mixin you use the @mixin directive and give it a name. We've named our mixin transform. We're also using the variable $property inside the parentheses so we can pass in a transform of whatever we want. After you create your mixin, you can then use it as a CSS declaration starting with @include followed by the name of the mixin.

name: "inheritance"

This is one of the most useful features of Sass. Using @extend lets you share a set of CSS properties from one selector to another. It helps keep your Sass very DRY. In our example we're going to create a simple series of messaging for errors, warnings and successes using another feature which goes hand in hand with extend, placeholder classes. A placeholder class is a special type of class that only prints when it is extended, and can help keep your compiled CSS neat and clean.
